"use strict";(self.webpackChunkapollo_docs=self.webpackChunkapollo_docs||[]).push([[162],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},s),{},{components:n})):a.createElement(h,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9390:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:2},u="Getting started",p={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"Installation",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/apollo-docs/getting-started",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/apollo-docs/"},next:{title:"Schema",permalink:"/apollo-docs/category/schema"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Debian-based Linux",id:"debian-based-linux",level:3},{value:"MacOS",id:"macos",level:3},{value:"Windows",id:"windows",level:3},{value:"Setting up",id:"setting-up",level:2},{value:"Running",id:"running",level:2},{value:"Realtime mode",id:"realtime-mode",level:3},{value:"Historical mode",id:"historical-mode",level:3},{value:"Output",id:"output",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting started"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"debian-based-linux"},"Debian-based Linux"),(0,i.kt)("p",null,"Install with ",(0,i.kt)("inlineCode",{parentName:"p"},"apt"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install apollo\n")),(0,i.kt)("h3",{id:"macos"},"MacOS"),(0,i.kt)("p",null,"TODO"),(0,i.kt)("h3",{id:"windows"},"Windows"),(0,i.kt)("p",null,"TODO"),(0,i.kt)("h2",{id:"setting-up"},"Setting up"),(0,i.kt)("p",null,"First, generate the config directory and files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"apollo init\n")),(0,i.kt)("p",null,"This will generate the configuration files (",(0,i.kt)("inlineCode",{parentName:"p"},"config.yml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.hcl"),") and put it into your configuration\ndirectory, which will either be ",(0,i.kt)("inlineCode",{parentName:"p"},"$XDG_CONFIG_HOME/apollo")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"$HOME/.config/apollo"),". This is the directory\nin which you have to configure ",(0,i.kt)("inlineCode",{parentName:"p"},"apollo"),", and it's also the directory where ",(0,i.kt)("inlineCode",{parentName:"p"},"apollo")," will try to find the specified\ncontract ABIs."),(0,i.kt)("h2",{id:"running"},"Running"),(0,i.kt)("h3",{id:"realtime-mode"},"Realtime mode"),(0,i.kt)("p",null,"In realtime mode, we only have to define the interval if we're doing a method calling schema (in seconds) and the chain,\nand an optional output option (either ",(0,i.kt)("inlineCode",{parentName:"p"},"--csv"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"--db")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--stdout"),"). See the ",(0,i.kt)("a",{parentName:"p",href:"##Output"},"Output")," for more info on that."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run a method calling schema every 5 seconds in realtime on Arbitrum, and save the results in a csv")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"apollo --realtime --interval 5 --csv\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run an event collecting schema in realtime on Ethereum, save the results in a database")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"apollo --realtime --db\n")),(0,i.kt)("h3",{id:"historical-mode"},"Historical mode"),(0,i.kt)("p",null,"In historical mode, we define the start and end blocks, the chain, the interval (when we're doing method calls),\nand an optional output option."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run a method calling schema every 100 blocks with a start and end block on Arbitrum, and save the results in a DB and a csv")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"apollo --start-block 1000000 --end-block 1200000 --interval 100 --csv --db\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run an event collecting schema over a range of blocks on Polygon, and output the results to ",(0,i.kt)("inlineCode",{parentName:"li"},"stdout"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"apollo --start-block 1000000 --end-block 1500000 --stdout\n")),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"There are 3 output options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stdout"),": this will just print the results to your terminal."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"csv"),": this will save your output into a csv file. The name of your file corresponds to the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," field of your contract schema definition. The other columns are going to be the inputs and outputs fields, also with the names corresponding to the schema."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"db"),": this will save your output into a Postgres SQL table. The settings are defined in ",(0,i.kt)("inlineCode",{parentName:"li"},"config.yml")," in your ",(0,i.kt)("inlineCode",{parentName:"li"},"apollo"),"\nconfig directory.")))}m.isMDXComponent=!0}}]);