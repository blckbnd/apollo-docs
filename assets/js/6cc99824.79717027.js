"use strict";(self.webpackChunkapollo_docs=self.webpackChunkapollo_docs||[]).push([[892],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),i=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=i(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=i(t),d=r,v=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return t?a.createElement(v,s(s({ref:n},u),{},{components:t})):a.createElement(v,s({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var i=2;i<o;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3564:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),s=["components"],c={},l="Schema Examples",i={unversionedId:"schema/schema-examples",id:"schema/schema-examples",title:"Schema Examples",description:"Here you can find some example schemas to get you started.",source:"@site/docs/schema/schema-examples.md",sourceDirName:"schema",slug:"/schema/schema-examples",permalink:"/apollo-docs/schema/schema-examples",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/apollo-docs/schema/intro"}},u={},p=[{value:"Events",id:"events",level:2},{value:"Calculate the price and size of every ETH-USDC swap on a V2 pool",id:"calculate-the-price-and-size-of-every-eth-usdc-swap-on-a-v2-pool",level:3},{value:"Record every ERC20 transfer, and parse the value",id:"record-every-erc20-transfer-and-parse-the-value",level:3},{value:"Methods",id:"methods",level:2},{value:"Calculate the mid price of a Uniswap V2 pool",id:"calculate-the-mid-price-of-a-uniswap-v2-pool",level:3},{value:"Get your USDC balance over a period of time",id:"get-your-usdc-balance-over-a-period-of-time",level:3}],m={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"schema-examples"},"Schema Examples"),(0,o.kt)("p",null,"Here you can find some example schemas to get you started."),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"calculate-the-price-and-size-of-every-eth-usdc-swap-on-a-v2-pool"},"Calculate the price and size of every ETH-USDC swap on a V2 pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'contract usdc_to_eth_swaps "0x905dfCD5649217c42684f23958568e533C711Aa3" {\n  abi = "unipair.abi.json"\n\n  // amount0Out = ETH out\n  // amount1In = USDC in \n  event Swap {\n    outputs = ["amount1In", "amount0Out", "amount0In", "amount1Out"]\n  }\n\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    tx_hash = tx_hash\n\n    price = amount0Out != 0 ? (parse_decimals(amount1In, 6) / parse_decimals(amount0Out, 18)) : (parse_decimals(amount1Out, 6) / parse_decimals(amount0In, 18))\n    dir = amount0Out != 0 ? "buy" : "sell"\n    size = amount1In != 0 ? parse_decimals(amount1In, 6) : parse_decimals(amount1Out, 6)\n  }\n}\n\n')),(0,o.kt)("h3",{id:"record-every-erc20-transfer-and-parse-the-value"},"Record every ERC20 transfer, and parse the value"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'event Transfer {\n  abi = "erc20.abi.json"\n\n  // The outputs we\'re interested in, same way as with methods.\n  outputs = ["from", "to", "value"]\n\n  method decimals {\n    outputs = ["decimals"]\n  }\n\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    tx_hash = tx_hash\n\n    sender = from\n    receiver = to\n    value = parse_decimals(value, decimals)\n  }\n}\n')),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"calculate-the-mid-price-of-a-uniswap-v2-pool"},"Calculate the mid price of a Uniswap V2 pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'contract usdc_eth_reserves "0x905dfCD5649217c42684f23958568e533C711Aa3" {\n  abi = "unipair.abi.json"\n\n  // Call methods\n  method getReserves {\n    // These are the outputs we\'re interested in. They are available \n    // to transform as variables in the "save" block below. Outputs should\n    // be provided as a list.\n    outputs = ["_reserve0", "_reserve1"]\n  }\n\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    eth_reserve = parse_decimals(_reserve0, 18)\n    usdc_reserve = parse_decimals(_reserve1, 6)\n\n    // Example: we want to calculate the mid price from the 2 reserves.\n    // Cannot reuse variables that are defined in the same "save" block.\n    // We have to reuse variables that were defined in advance, i.e.\n    // in "inputs" or "outputs"\n    mid_price = parse_decimals(_reserve1, 6) / parse_decimals(_reserve0, 18)\n  }\n}\n')),(0,o.kt)("h3",{id:"get-your-usdc-balance-over-a-period-of-time"},"Get your USDC balance over a period of time"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'contract usdc_balance "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8" {\n  abi = "erc20.abi.json"\n\n  method balanceOf {\n    // Inputs should be defined as a map.\n    inputs = {\n      address = "0xe1Dd30fecAb8a63105F2C035B084BfC6Ca5B1493"\n    }\n\n    outputs = ["balance"]\n  }\n\n  save {\n    account = address\n    account_balance = parse_decimals(balance, 18)\n  }\n}\n')))}d.isMDXComponent=!0}}]);