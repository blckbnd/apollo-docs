"use strict";(self.webpackChunkapollo_docs=self.webpackChunkapollo_docs||[]).push([[881],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4392:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s="Introduction",c={unversionedId:"schema/intro",id:"schema/intro",title:"Introduction",description:"The schema is in the form of a DSL implemented with HCL to define the data",source:"@site/docs/schema/intro.md",sourceDirName:"schema",slug:"/schema/intro",permalink:"/apollo-docs/schema/intro",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Schema",permalink:"/apollo-docs/category/schema"},next:{title:"Schema Examples",permalink:"/apollo-docs/schema/schema-examples"}},p={},u=[{value:"Save Context",id:"save-context",level:3},{value:"Methods Example",id:"methods-example",level:3},{value:"Events Example",id:"events-example",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The schema is in the form of a DSL implemented with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hashicorp/hcl"},"HCL")," to define the data\nwe're interested in. This means that basic arithmetic operations and ternary operators\nfor control flow are supported by default. The top-level elements are ",(0,o.kt)("inlineCode",{parentName:"p"},"chain")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"contract"),".\nIn the ",(0,o.kt)("inlineCode",{parentName:"p"},"contract")," block we provide the ABI file, along with which ",(0,o.kt)("inlineCode",{parentName:"p"},"methods")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"events")," we want to get the data for."),(0,o.kt)("p",null,"In the case of a ",(0,o.kt)("inlineCode",{parentName:"p"},"method"),", we first define ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs"),". For an ",(0,o.kt)("inlineCode",{parentName:"p"},"event"),", it's only ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs"),".\nThe names of the methods, events, inputs and outputs should correspond exactly to what's in the provided\nABI file."),(0,o.kt)("p",null,"The last block in ",(0,o.kt)("inlineCode",{parentName:"p"},"contract")," is the ",(0,o.kt)("inlineCode",{parentName:"p"},"save")," block. In this block we can do some basic transformations\nbefore saving our output, and it provides access to variables and functions that we might need. "),(0,o.kt)("h3",{id:"save-context"},"Save Context"),(0,o.kt)("p",null,"Any ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," is provided as a variable by default.\nOther variables available are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"timestamp")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blocknumber")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"contract_address"))),(0,o.kt)("p",null,"And for ",(0,o.kt)("inlineCode",{parentName:"p"},"events"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tx_hash"))),(0,o.kt)("p",null,"The available functions are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"lower(str)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"upper(str)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parse_decimals(raw, decimals)"))),(0,o.kt)("p",null,"Below are some annotated examples to help you get started. There are some more examples in the ",(0,o.kt)("a",{parentName:"p",href:"/apollo-docs/schema/schema-examples"},"docs"),"."),(0,o.kt)("h3",{id:"methods-example"},"Methods Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'// Define the chain to run on\nchain = "arbitrum"\n\ncontract usdc_eth_reserves "0x905dfCD5649217c42684f23958568e533C711Aa3" {\n  // Will search in the Apollo config directory\n  abi = "unipair.abi.json"\n\n  // Call methods\n  method getReserves {\n    // These are the outputs we\'re interested in. They are available \n    // to transform as variables in the "save" block below. Outputs should\n    // be provided as a list.\n    outputs = ["_reserve0", "_reserve1"]\n  }\n\n  // The "save" block will give us access to more context, including variables\n  // like "timestamp", "blocknumber", "contract_address", and any inputs or outputs\n  // defined earlier.\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    eth_reserve = parse_decimals(_reserve0, 18)\n    usdc_reserve = parse_decimals(_reserve1, 6)\n\n    // Example: we want to calculate the mid price from the 2 reserves.\n    // Cannot reuse variables that are defined in the same "save" block.\n    // We have to reuse variables that were defined in advance, i.e.\n    // in "inputs" or "outputs"\n    mid_price = parse_decimals(_reserve1, 6) / parse_decimals(_reserve0, 18)\n\n  }\n}\n')),(0,o.kt)("h3",{id:"events-example"},"Events Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'// Define the chain to run on\nchain = "arbitrum"\n\ncontract usdc_to_eth_swaps "0x905dfCD5649217c42684f23958568e533C711Aa3" {\n  // Will search in the Apollo config directory\n  abi = "unipair.abi.json"\n\n  // Listen for events\n  event Swap {\n    // The outputs we\'re interested in, same way as with methods.\n    outputs = ["amount1In", "amount0Out", "amount0In", "amount1Out"]\n  }\n\n\n  // Besides the normal context, the "save" block for events provides an additional\n  // variable "tx_hash". This is the transaction hash of the originating transaction.\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    tx_hash = tx_hash\n\n    // Example: we want to calculate the price of the swap.\n    price = amount0Out != 0 ? (parse_decimals(amount1In, 6) / parse_decimals(amount0Out, 18)) : (parse_decimals(amount1Out, 6) / parse_decimals(amount0In, 18))\n    dir = amount0Out != 0 ? upper("buy") : upper("sell")\n    size = amount1In != 0 ? parse_decimals(amount1In, 6) : parse_decimals(amount1Out, 6)\n  }\n}\n')))}d.isMDXComponent=!0}}]);