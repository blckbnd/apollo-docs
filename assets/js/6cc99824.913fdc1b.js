"use strict";(self.webpackChunkapollo_docs=self.webpackChunkapollo_docs||[]).push([[892],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=i(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var i=2;i<o;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3564:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],c={},l="Schema Examples",i={unversionedId:"schema/schema-examples",id:"schema/schema-examples",title:"Schema Examples",description:"Here you can find some example schemas to get you started.",source:"@site/docs/schema/schema-examples.md",sourceDirName:"schema",slug:"/schema/schema-examples",permalink:"/apollo-docs/schema/schema-examples",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Schema",permalink:"/apollo-docs/category/schema"}},u={},p=[{value:"Events",id:"events",level:2},{value:"Calculate the price and size of every ETH-USDC swap on a V2 pool",id:"calculate-the-price-and-size-of-every-eth-usdc-swap-on-a-v2-pool",level:3},{value:"Methods",id:"methods",level:2},{value:"Calculate the mid price of a Uniswap V2 pool",id:"calculate-the-mid-price-of-a-uniswap-v2-pool",level:3},{value:"Get your USDC balance over a period of time",id:"get-your-usdc-balance-over-a-period-of-time",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"schema-examples"},"Schema Examples"),(0,o.kt)("p",null,"Here you can find some example schemas to get you started."),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"calculate-the-price-and-size-of-every-eth-usdc-swap-on-a-v2-pool"},"Calculate the price and size of every ETH-USDC swap on a V2 pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'contract usdc_to_eth_swaps "0x905dfCD5649217c42684f23958568e533C711Aa3" {\n  abi = "unipair.abi.json"\n\n  // amount0Out = ETH out\n  // amount1In = USDC in \n  event Swap {\n    outputs = ["amount1In", "amount0Out", "amount0In", "amount1Out"]\n  }\n\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    tx_hash = tx_hash\n\n    price = amount0Out != 0 ? (parse_decimals(amount1In, 6) / parse_decimals(amount0Out, 18)) : (parse_decimals(amount1Out, 6) / parse_decimals(amount0In, 18))\n    dir = amount0Out != 0 ? "buy" : "sell"\n    size = amount1In != 0 ? parse_decimals(amount1In, 6) : parse_decimals(amount1Out, 6)\n  }\n}\n')),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"calculate-the-mid-price-of-a-uniswap-v2-pool"},"Calculate the mid price of a Uniswap V2 pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'contract usdc_eth_reserves "0x905dfCD5649217c42684f23958568e533C711Aa3" {\n  abi = "unipair.abi.json"\n\n  // Call methods\n  method getReserves {\n    // These are the outputs we\'re interested in. They are available \n    // to transform as variables in the "save" block below. Outputs should\n    // be provided as a list.\n    outputs = ["_reserve0", "_reserve1"]\n  }\n\n  save {\n    timestamp = timestamp\n    block = blocknumber\n    contract = contract_address\n    eth_reserve = parse_decimals(_reserve0, 18)\n    usdc_reserve = parse_decimals(_reserve1, 6)\n\n    // Example: we want to calculate the mid price from the 2 reserves.\n    // Cannot reuse variables that are defined in the same "save" block.\n    // We have to reuse variables that were defined in advance, i.e.\n    // in "inputs" or "outputs"\n    mid_price = parse_decimals(_reserve1, 6) / parse_decimals(_reserve0, 18)\n  }\n}\n')),(0,o.kt)("h3",{id:"get-your-usdc-balance-over-a-period-of-time"},"Get your USDC balance over a period of time"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'contract usdc_balance "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8" {\n  abi = "erc20.abi.json"\n\n  method balanceOf {\n    // Inputs should be defined as a map.\n    inputs = {\n      address = "0xe1Dd30fecAb8a63105F2C035B084BfC6Ca5B1493"\n    }\n\n    outputs = ["balance"]\n  }\n\n  save {\n    account = address\n    account_balance = parse_decimals(balance, 18)\n  }\n}\n')))}d.isMDXComponent=!0}}]);