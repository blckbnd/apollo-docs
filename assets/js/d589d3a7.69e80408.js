"use strict";(self.webpackChunkapollo_docs=self.webpackChunkapollo_docs||[]).push([[162],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(u,".").concat(m)]||d[m]||s[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9390:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:2},u="Getting Started",p={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Installation",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/apollo-docs/getting-started",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/apollo-docs/"},next:{title:"Schema",permalink:"/apollo-docs/category/schema"}},c={},s=[{value:"Installation",id:"installation",level:2},{value:"Setting up",id:"setting-up",level:2},{value:"Running",id:"running",level:2},{value:"Realtime mode",id:"realtime-mode",level:3},{value:"Historical mode",id:"historical-mode",level:3},{value:"Output",id:"output",level:2}],d={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h2",{id:"setting-up"},"Setting up"),(0,a.kt)("p",null,"First, generate the config directory and files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apollo init\n")),(0,a.kt)("p",null,"This will generate the configuration files (",(0,a.kt)("inlineCode",{parentName:"p"},"config.yml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"schema.hcl"),") and put it into your configuration\ndirectory, which will either be ",(0,a.kt)("inlineCode",{parentName:"p"},"$XDG_CONFIG_HOME/apollo")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"$HOME/.config/apollo"),". This is the directory\nin which you have to configure ",(0,a.kt)("inlineCode",{parentName:"p"},"apollo"),", and it's also the directory where ",(0,a.kt)("inlineCode",{parentName:"p"},"apollo")," will try to find the specified\ncontract ABIs."),(0,a.kt)("h2",{id:"running"},"Running"),(0,a.kt)("h3",{id:"realtime-mode"},"Realtime mode"),(0,a.kt)("p",null,"In realtime mode, we only have to define the interval if we're doing a method calling schema (in seconds) and the chain,\nand an optional output option (either ",(0,a.kt)("inlineCode",{parentName:"p"},"--csv"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--db")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--stdout"),"). See the ",(0,a.kt)("a",{parentName:"p",href:"##Output"},"Output")," for more info on that."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run a method calling schema every 5 seconds in realtime on Arbitrum, and save the results in a csv")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apollo --realtime --interval 5 --csv\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run an event collecting schema in realtime on Ethereum, save the results in a database")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apollo --realtime --db\n")),(0,a.kt)("h3",{id:"historical-mode"},"Historical mode"),(0,a.kt)("p",null,"In historical mode, we define the start and end blocks, the chain, the interval (when we're doing method calls),\nand an optional output option."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run a method calling schema every 100 blocks with a start and end block on Arbitrum, and save the results in a DB and a csv")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apollo --start-block 1000000 --end-block 1200000 --interval 100 --csv --db\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run an event collecting schema over a range of blocks on Polygon, and output the results to ",(0,a.kt)("inlineCode",{parentName:"li"},"stdout"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apollo --start-block 1000000 --end-block 1500000 --stdout\n")),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("p",null,"There are 3 output options:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stdout"),": this will just print the results to your terminal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"csv"),": this will save your output into a csv file. The name of your file corresponds to the ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," field of your contract schema definition. The other columns are going to be the inputs and outputs fields, also with the names corresponding to the schema."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"db"),": this will save your output into a Postgres SQL table. The settings are defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"config.yml")," in your ",(0,a.kt)("inlineCode",{parentName:"li"},"apollo"),"\nconfig directory.")))}m.isMDXComponent=!0}}]);