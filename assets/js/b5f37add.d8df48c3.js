"use strict";(self.webpackChunkapollo_docs=self.webpackChunkapollo_docs||[]).push([[253],{7059:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"erc4626-usage","metadata":{"permalink":"/apollo-docs/blog/erc4626-usage","source":"@site/blog/2022-06-14-erc4626-usage/index.mdx","title":"Introducing Apollo: analyzing the usage of ERC4626 across chains","description":"Introduction","date":"2022-06-14T00:00:00.000Z","formattedDate":"June 14, 2022","tags":[{"label":"apollo","permalink":"/apollo-docs/blog/tags/apollo"},{"label":"erc4626","permalink":"/apollo-docs/blog/tags/erc-4626"},{"label":"tutorial","permalink":"/apollo-docs/blog/tags/tutorial"}],"readingTime":13.005,"truncated":true,"authors":[{"name":"Jonas Bostoen","url":"https://github.com/jonasbostoen","imageURL":"https://github.com/jonasbostoen.png","key":"jonas"},{"name":"Francesco Mosterts","url":"https://github.com/fmosterts","imageURL":"https://github.com/fmosterts.png","key":"francesco"}],"frontMatter":{"slug":"erc4626-usage","title":"Introducing Apollo: analyzing the usage of ERC4626 across chains","authors":["jonas","francesco"],"date":"2022-06-14T00:00:00.000Z","tags":["apollo","erc4626","tutorial"]}},"content":"## Introduction\\nFor the last few months, we\'ve been working on [Apollo](https://github.com/chainbound/apollo) \\n([docs](https://apollo.chainbound.io)), a tool\\nto make it easy for anyone to **query**, **filter**, **transform** and **save** EVM chaindata based on a schema.\\n\\nWe built Apollo because we needed to be able to scrape obscure EVM chaindata fast, and the tools currently out there\\nwere too limiting in what they could do. They either run only on a couple chains, or rely on indexing, which is a process\\nthat takes time and is not feasible for just any protocol. **Apollo** interacts directly with the standardized\\n[JSON RPC API](https://eth.wiki/json-rpc/API) that any EVM node implementation should expose. This means that\\nas long as you have a JSON RPC API for your chain, **Apollo will be able to run there**. The only other thing\\nyou need is an [ABI](https://www.quicknode.com/guides/solidity/what-is-an-abi).\\n\\nWe believe that the best way to introduce a tool like this is to show its value in a **real world example**.\\nInspired by [this tweet](https://twitter.com/boredGenius/status/1533531858591309824), we set about analyzing\\nthe usage of the new [ERC4626 Tokenized Vault Standard](https://eips.ethereum.org/EIPS/eip-4626) across\\nmultiple chains. If you would like to explore more chains, at the\\nend of the article you will be able to do that yourself, because we are open-sourcing Apollo.\\n\x3c!--truncate--\x3e\\n\\n\\n## What is ERC4626?\\nERC4626 is a new token standard aims to clear up the problems with having different implementations of tokenized vaults.\\nOne of the most powerful mechanisms in DeFi is **composability**, but composability doesn\'t work without standards. If you know \\n[ERC20](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/) (token standard) or \\n[ERC721](https://ethereum.org/en/developers/docs/standards/tokens/erc-721/) (NFT standard), you know how crucial they are. One of the more important products in DeFi are yield-bearing tokenized\\nvaults. If you\'ve ever staked Sushi in return for xSushi, or deposited ETH on Aave and received aETH, you\'ve used these products.\\nThey represent shares of an underlying token that generate interest over time.\\nThe problem is that when building applications that can integrate with these tokens, you have to build an integration for each\\nseparate implementation. This is complex, error-prone, and resource intensive, resulting in less applications actually doing it. **Bad for composability**.\\n\\nERC4626 aims to set a standard for these products called the Tokenized Vault Standard. \\nIf an application works with ERC4626, it works with any yield-bearing token that \\nimplements the standard. This will drastically lower the integration effort and will enable a renaissance in DeFi.\\nIt will, for example, provide lending platforms the ability to easily accept any ERC4626 token as collateral,\\nwhich would be one example of **composable yield**.\\n\\nLet\'s take a look at some of the events and methods of the interface (incomplete), because \\nthese will be useful later.\\n```sol title=\\"ierc20.sol\\"\\nabstract contract IERC4626 is ERC20 {\\n    // Emitted every time someone deposits\\n    event Deposit(address indexed sender, address indexed receiver, uint256 assets, uint256 shares);\\n\\n    // Emitted every time someone withdraws\\n    event Withdraw(address indexed sender, address indexed receiver, uint256 assets, uint256 shares);\\n\\n    // Returns the address of the underlying token\\n    function asset() external view virtual returns (address asset);\\n\\n    // Returns the amount of assets managed by the vault\\n    function totalAssets() external view virtual returns (uint256 totalAssets);\\n\\n    // Mints `shares` vault tokens by depositing exactly `assets` underlying assets\\n    function deposit(uint256 assets, address receiver) external virtual returns (uint256 shares);\\n\\n    // Mints exactly `shares` vault tokens by depositing `assets` underlying assets\\n    function mint(uint256 shares, address receiver) external virtual returns (uint256 assets);\\n\\n    // Redeems `shares` from `assets`\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 shares);\\n\\n    // Redeems `shares` from `assets`\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 assets);\\n\\n    // Other view functions omitted\\n    ...\\n}\\n```\\n\\n## Analysis\\nSince we believe ERC4626 will be a very important building block in future DeFi protocols, we wanted to analyze its usage.\\nPartly because we live in a multi-chain world, and partly because we want to highlight a competitive feature that **Apollo** has,\\nwe will be looking at 4 chains: **Ethereum**, **Polygon**, **Arbitrum** and **Optimism**. This analysis serves\\nas an introduction to using Apollo, but you can also just move on to the [results](#results).\\n\\n### Apollo workflow\\nThis is the game plan: we are going to collect every ERC4626 `Deposit` event (see above) across\\nthe chains, from February 1 until June 14. The problem is that the `Deposit` event signature\\nis not unique to the ERC4626 event, because it is derived from the event name and its types.\\nUnder the hood, what we\'re actually filtering for is an event **topic**, which in this case will be\\n```\\nkeccak256(\\"Deposit(address,address,uint256,uint256)\\") = 0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7\\n```\\nThere are other `Deposit` events that have the same signature, so we need to find a way to filter out the right ones.\\nWith Apollo, we can call methods at the time an event occurs, and the method will be called on the contract that\\nemitted the event. So to filter out the ERC4626 events, we can call the `asset` method, which is part of the interface.\\nIf this call succeeds, we can be relatively sure the contract is an ERC4626 implementation.\\nIf this call reverts, however, which means that the contract does not adhere to the standard, Apollo will just move on and save nothing.\\n\\n#### Schema\\nThis is the schema we\'re going to run:\\n```hcl title=\\"schema.hcl\\"\\nstart_time = format_date(\\"02-01-2006 15:04\\", \\"01-02-2022 00:00\\")\\nend_time = now\\n\\nloop {\\n  items = [\\"ethereum\\", \\"polygon\\", \\"arbitrum\\", \\"optimism\\"]\\n\\n  query \\"erc4626_deposits\\" {\\n    chain = item\\n\\n    event \\"Deposit\\" {\\n      abi = \\"erc4626.abi.json\\"\\n      outputs = [\\"caller\\", \\"owner\\", \\"assets\\", \\"shares\\"]\\n\\n      // This will revert if the contract does not have\\n      // this method (required in the ERC4626 standard)\\n      method \\"asset\\" {\\n        outputs = [\\"asset\\"]\\n      }\\n\\n      method \\"decimals\\" {\\n        outputs = [\\"decimals\\"]\\n      }\\n\\n      method \\"symbol\\" {\\n        outputs = [\\"symbol\\"]\\n      }\\n    }\\n\\n    save {\\n      block = blocknumber\\n      time = timestamp\\n      contract = contract_address\\n      tx = tx_hash\\n      // We need the chain to differentiate \\n      // the results\\n      chain = chain\\n\\n      underlying = asset\\n      caller = caller\\n      owner = owner\\n      assets = parse_decimals(assets, decimals)\\n      shares = parse_decimals(shares, decimals)\\n      symbol = symbol\\n    }\\n  }\\n}\\n```\\nWe first have to define our time range, which we can do with `start_time` and `end_time`. `format_date(fmt, date)` can be used \\nto convert a datetime to a UNIX timestamp, according to a format. The `now` variable is provided by the DSL.\\n\\nNext up, we\'ll define a `loop` block. For every `item` in `items`, Apollo will create a separate query, with the `item` as a variable.\\nThe name of the `query` (erc4626_deposits), will be the name of our output file / output table. We want to filter every \\n`Deposit` event, which we can do by declaring an `event` block with the `Deposit` label. In the event block, we define the ABI\\n(which can be found in the Apollo config directory, see [setting up docs](https://apollo.chainbound.io/getting-started#setting-up)), \\nand the `outputs` we want to save for further processing. These have to match the ABI exactly.\\n\\nAfter this, we want to gather some extra information by calling some methods on the contract of interest.\\nWe do that with `method` blocks, which have the method name as a label. Just like in `event`, we define our outputs.\\nThere are 2 blocks that we don\'t need here, which are `transform` and `filter`, but you can read more on them in the \\n[schema docs](https://apollo.chainbound.io/schema/intro#transform). In the `save` block, we define the final format\\nof our output columns. The `save` block has access to any previous `output` parameters, as well as other event context variables\\nlike `blocknumber`, `timestamp`, `contract_address`, `tx_hash`, and `chain`, which we all want to save.\\nThere are some helper functions available as well, and we\'ll use `parse_decimals(raw, decimals)` to format\\nour output.\\n\\n#### Running\\nBefore running, make sure that every `chain` has a corresponding JSON-RPC API field in your `config.yml`. We suggest using either your own\\nnodes, or providers like [Alchemy](https://www.alchemy.com) or [Chainstack](https://chainstack.com), because the default public endpoints will not do. \\nEven when using a specialized provider, you can get rate limited. This is why we\'ve also provided an option to rate limit Apollo itself. \\nFor this research, we used Alchemy APIs with the default value of `100`:\\n```bash\\napollo --stdout --csv --log-level 0 --rate-limit 100\\n```\\nWe managed to not exceed our CU capacity, and not get any timeouts. It took around 5 minutes to collect this data.\\nIf you have your own node, you can crank this number up. When running this with our own [Erigon](https://github.com/ledgerwatch/erigon) \\nnode and a value of `500`, we managed to collect everything in around 30 seconds.\\n\\nInternally, Apollo uses primitive caching, and methods like `symbol` and `decimals` are cached for every contract, \\ndrastically reducing the amount of calls made to the API. At the end of execution, you will see some stats printed for each chain:\\n![](./apollo-erc4626.png)\\n\\n\\n### Results\\nGet the results (8328 lines): [erc4626_deposits.csv](./erc4626_deposits.csv)\\n\\n#### Daily `Deposit` events per chain\\n[![](./daily-deposits.svg)](./daily-deposits.svg)\\n\\nAs we can see here, ERC4626 adoption on Polygon has been the most succesful, perhaps surprisingly. Since its inception,\\nPolygon has had 4046 ERC4626 `Deposit` events. Ethereum comes in second\\nwith 3287 events, Optimism third with 939 events, and finally Arbitrum, with only 55 events.\\nBut Ethereum was by far the first with any `Deposit` events at all, we\'ll come back to that later.\\n\\nZooming in to where things become interesting, we can see that usage really started picking up on May 4th.\\n[![](./daily-deposits-zoomed.svg)](./daily-deposits-zoomed.svg)\\n\\nThis is when both [Thorswap Staking V2](https://docs.thorswap.finance/thorswap/usdthor-token/usdthor/vthor) on Ethereum\\nand [Aavegotchi wapGHST Staking](https://twitter.com/aavegotchi/status/1522212621285576704) on Polygon went live.\\n### Protocols\\n#### Ethereum\\nLet\'s start with Ethereum, since it had the first deployments. Focusing in on the daily `Deposit` events on Ethereum,\\nwe get the following chart:\\n[![](./daily-deposits-eth.svg)](./daily-deposits-eth.svg)\\n\\nLooking at those first deposits and their symbols, we can figure out which protocols spearheaded ERC4626 adoption:\\n\\n| Symbol          | First_occurence                |   Total_deposits | Tx_hash                                                                 \\n|:----------------|--------------------|:-----------------|:-------------------------------------------------------------------\\n| d3CVX           | 2022-02-14 |      58          | 0x3bde42aef1d795ec11a2fdec2508fca880a4a73b4818e743790e6a14b2850b26 \\n| fei3crvCVX      | 2022-02-23 |     111          | 0xb7d0cc8597c00bdee0363c1a69db236e50e247403315650f8e5c6d76d18720e1 \\n| tricryptoCVX    | 2022-02-24 |      13          | 0xa116b76522fcf8a5efad14cf8ed4817c2ee6b5bc884b16cf752c6f18b2fc015d \\n| d3convex        | 2022-02-24 |      14          | 0x3be7f2ce5ddf77d923ed56b5dd4ddbde64a622e4075984be0a5727e417ec462b \\n| fei3crvConvex   | 2022-02-24 |       5          | 0x64dab869db30d6b1f817b09bb8c0b4fd8b89f617f075cf2a86b743768c9a5d5b \\n| alusd3crvConvex | 2022-02-25 |       4          | 0xc06d393589da3f911912b97f879c95ed22c345bb1aa208c039b477b4db16912b \\n| FRX3CRVCVX      | 2022-02-25 |      18          | 0x946ddcc89737b64ca2598dea0ef9aedf123072804f90f96f437959995ad0a6cc \\n| steCRVCVX       | 2022-02-25 |      24          | 0x48e7c4ae4adc241375449b392c58236427758e878c8d5b8aa9a80d6fae0d068f \\n| USTwCVX         | 2022-02-25 |      29          | 0x2b8d499ce18b85c52193e03a1292fd833835c8122f1046fa1ce7b4434cbc3b10 \\n| (re)TOKE        | 2022-03-06 |       1          | 0xddc45b5f98e26d8a0331004fcb753d1bbdc6410295acb05bb201a0702bee9990 \\n| tsTRIBE         | 2022-03-21 |       5          | 0x1e54269a8673a8620bef3a1c29a0d324ab608d5080e3937bb491a57ccc4344ec \\n| wfFEI-8         | 2022-03-22 |       4          | 0xdcc3cb38450972076ff91ba6ef798355635db1bdeba581f409863cda997e83a4 \\n| TTV             | 2022-03-30 |       1          | 0x7c5cef1e9fa8f2f52a0b7baeb5db83fc85dae357e39c657f2fea3635b1827ada \\n| cvxFXSFXS       | 2022-04-05 |      38          | 0x2c1a66d9024c734f3aa204306973d9ecd3d13bd5c84e8ea1c31fa3ea852cf0d3 \\n| rETHwstETH      | 2022-04-06 |       5          | 0xf8273032e398567741f938c4daf34ece9dd70aaef4fd476728d349b9ca8016f8 \\n| cvxCRVCRV       | 2022-04-10 |      41          | 0xe542dbe25913ed321485ebd75bea95ee5bcb9e6ccbc3fd6a387f61f82b7f11be \\n| WOUSD           | 2022-04-11 |      10          | 0x6ca75d83741ba76c0ead05fb7bc93240472460a601fca1e8e236f976485956bd \\n| tsBAL           | 2022-04-19 |       1          | 0xe66b53b0ac06c9617010197d370ed68792aef7a6b30e8bfa200a2f77e7aec1ce \\n| tALCX           | 2022-04-19 |       1          | 0x7244feb527877b8d80ae71a4d044423087bbca0d0c52f70ea94df8366be52dbf \\n| alETHLp         | 2022-04-19 |       1          | 0xe8310a56c5721598373a936e6ffc04714510011a4fcee729afb142d703954284 \\n| ALCXETH         | 2022-04-19 |       2          | 0x56ab7cce4626c0d31af10537d75143ca2016b54063677577f0dad5f8dc32ff2b \\n| 4626-fFEI-8     | 2022-04-19 |       1          | 0x2985f3271ff49ffaf37931f35cf96a7283fa112f2027cec979b1c454f5b6aa86 \\n| vTHOR           | 2022-04-25 |    2289          | 0x545638df92ff8743e9eeb004385ff72ed4fdc76d8913b40a2274290e66245fb0 \\nFrom this table, we can see that [Convex Finance](https://www.convexfinance.com) were the earliest adopters of ERC4626.\\nThey use it in some of their staking pools, specifically for staking Curve LP tokens. There are other\\ntokens, like `(re)TOKE` (part of TOKEMAK) which only have 1 deposit over the course of their lifetime, so we\'re not going to mention those.\\nIf you\'re looking for that secret single deposit alpha, download the dataset above!\\nConvex has currently deployed the most ERC4626 vaults.\\n\\nNext up, we start to see some implementations from the original authors of ERC4626: [Fei Protocol](https://fei.money/).\\nTokens like `tsTribe` and `tsBAL` are part of the [Tribe Turbo](https://medium.com/fei-protocol/the-tribe-dao-strongly-believes-that-a-healthy-and-thriving-defi-ecosystem-needs-a-robust-platform-b1faea700dfa)\\ndeployments. They don\'t seem to be active, though.\\n\\n`WOUSD` is part of a protocol called [Origin Dollar](https://www.ousd.com), a yield bearing stablecoin. Finally we have\\n`vTHOR`, which is part of [Thorswap](https://thorswap.finance). On Ethereum, this is by far the most popular ERC4626 vault\\nby number of deposits.\\n\\nIf we sort by the most active ERC4626 vaults, we get the following table:\\n\\n| Symbol          |   Number of Deposits |\\n|:----------------|--------:|\\n| vTHOR           |    2289 |\\n| xMPL            |     435 |\\n| uCVX            |     115 |\\n| fei3crvCVX      |     111 |\\n| d3CVX           |      58 |\\n| imUSD           |      47 |\\n| cvxCRVCRV       |      41 |\\n| cvxFXSFXS       |      38 |\\n| USTwCVX         |      29 |\\n| steCRVCVX       |      24 |\\n| FRX3CRVCVX      |      18 |\\n| d3convex        |      14 |\\n| tricryptoCVX    |      13 |\\n| WOUSD           |      10 |\\n| rETHwstETH      |       5 |\\n| fei3crvConvex   |       5 |\\n| tsTRIBE         |       5 |\\n| wfFEI-8         |       4 |\\n| \u221e-yvWETH-xPYT   |       4 |\\n| alusd3crvConvex |       4 |\\n| imBTC           |       3 |\\n| tsgOHM          |       3 |\\n| ALCXETH         |       2 |\\n| 4626-fFEI-8     |       1 |\\n| alETHLp         |       1 |\\n| tALCX           |       1 |\\n| aave2-CLR-S     |       1 |\\n| tsBAL           |       1 |\\n| TTV             |       1 |\\n| Frax3Crv        |       1 |\\n| D3              |       1 |\\n| BAUSDC-2206     |       1 |\\n| (re)TOKE        |       1 |\\n\\nAside from Thorswap and Convex, two other very popular ERC4626 deployments are `xMPL` from [Maple Finance](https://maple.finance)\\nand `uCVX`, a [partnership](https://mirror.xyz/0xE90c74145245B498fef924fAdC7bb34253c7cF90/WEj9OWAbvWMJ1xooZ3SOIAWvkp3k5t_mpOXL6EdyRFM)\\nbetween **Pirex** and **Llama Airforce** which allows you to deposit `pxCVX`, a vault for `CVX`. Composability in action!\\n\\nvTHOR currently manages about $12,7M USD of THOR deposits, and xMPL around $45M of MPL. So even though vTHOR has more deposits,\\nxMPL manages a lot more assets.\\n\\n#### Polygon\\n[![](./daily-deposits-poly.svg)](./daily-deposits-poly.svg)\\nPolygon usage really only started after the deployment of **wapGHST** staking on May 4th.\\nOn May 26th, [mStable](https://mstable.org/) [upgraded](https://medium.com/mstable/mstable-save-gets-erc-4626-upgrade-5d94e64bf694) \\ntheir Save Contracts to implement ERC4626, and deposits stayed consistently high.\\n\\nZooming in on the most active vaults, **mStable\'s** `imUSD` is at the top, followed by `wapGHST`:\\n\\n| Symbol   |   Number of Deposits |\\n|:---------|--------:|\\n| imUSD    |    2124 |\\n| wapGHST  |    1845 |\\n| LOL      |      20 |\\n| eVault   |      18 |\\n| LOLt     |      14 |\\n| svUSDC   |      10 |\\n| swMATIC  |       4 |\\n| LOLT     |       3 |\\n| USD+     |       3 |\\n| swUSDc   |       3 |\\n| LOLB     |       1 |\\n| stUSD+   |       1 |\\n\\n`imUSD` currently manages around $6,5M mUSD, and wapGHST manages $1,7M worth of aPolGHST, which is the Aave token for\\nAavegotchi GHST.\\n\\nWe could not find any info on `LOL`, which is a vault for Aave Polygon USDC.\\n`eVault` was interesting. Most of the `Deposit` events where from [0x2C882729f2710D0b8d23d98199ba9FdA1aF05109](https://polygonscan.com/address/0x2C882729f2710D0b8d23d98199ba9FdA1aF05109),\\nwhich turned out to be a mocking contract with LINK as its underlying token.\\nThe real implementation was at [0xff07A39665740eB95E57ccDC3963B026741cC88E](https://polygonscan.com/address/0xff07A39665740eB95E57ccDC3963B026741cC88E),\\nwhich is a QiDAO vault for Quickswap WMATIC-QI LP tokens. The contract was only deployed 5 days ago at the time of writing (June 14, 2022).\\n\\n#### Optimism\\n[![](./daily-deposits-opt.svg)](./daily-deposits-opt.svg)\\nOptimism had 0 ERC4626 activity until May 24th, when [Rubicon Finance](https://rubicon.finance/) upgraded their tokens to implement the standard.\\nAside from Rubicon (the `bath` tokens), there doesn\'t seem to be a lot of ERC4626 activity:\\n\\n| Symbol                |   Number of Deposits |\\n|:----------------------|--------:|\\n| bathUSDC              |     400 |\\n| bathOP                |     246 |\\n| bathETH               |     175 |\\n| bathDAI               |      38 |\\n| bathUSDT              |      38 |\\n| bathSNX               |      30 |\\n| nukenke               |       5 |\\n| bathWBTC              |       4 |\\n| dmoUSDC-Basis-Trading |       2 |\\n| CSET                  |       1 |\\n\\n## Conclusion\\nERC4626 is definitely picking up some steam, but there aren\'t many big protocols like Aave or Compound that upgraded their\\ncontracts yet, even though the whole DeFi ecosystem would clearly benefit from it. Kudos to all the protocols that did implement it!\\n\\nIf you want to analyze the data yourself, you can download it here: [erc4626_deposits.csv](erc4626_deposits.csv).\\nYou can also try out Apollo at [github.com/chainbound/apollo](https://github.com/chainbound/apollo), make sure to read the\\n[documentation](https://apollo.chainbound.io)!\\n\\n:::caution\\nApollo is still alpha software, and there will be bugs. If you find any, please open an issue on Github.\\n:::"}]}')}}]);